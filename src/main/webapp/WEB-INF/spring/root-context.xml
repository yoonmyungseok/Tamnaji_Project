<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->

	<!-- 
		* root-context.xml : 서버 구동과 동시에 web.xml 파일을 거쳐서 바로 로딩되는 문서
							  서버 구동과 동시에 바로 셋팅해야 하는 내용들을 기술
							  예) DB 설정, 트랜잭션 처리 설정, 내외부 모듈 연결 설정
		
		* root-context.xml 파일 설정 방법
		beans 태그로 감싸져 있음 => bean 하나하나씩 등록시켜주면 됨
		bean : "도구" (자바 객체) => 그동안은 우리가 new 구문으로 일일이 객체 생성을 했지만
								   이제는 스프링이 알아서 객체를 생성해주고 관리함
								   어느 타입의(자바 클래스 타입) 어느 이름의 객체를 앞으로 사용할건지 등록
	-->
	
	<!-- DB 연결용 bean 등록 (어느클래스 타입의 어느 객체를 만들건지) 3단계 -->
	<!-- 1단계. DB 연결을 위한 도구를 설정 -->
	<bean class="org.apache.commons.dbcp.BasicDataSource" id="dataSource" destroy-method="close">
		<!-- 어느 DB 에 접속할건지 지정 -->
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="username" value="TAMNAJI" />
		<property name="password" value="TAMNAJI" />
	</bean>
	<!-- 
		객체가 필요할 때마다 내부적으로 이 코드가 실행됨
		BasicDataSource dataSource = new BasicDataSource();
		dataSource.setDriverClassName("oracle.jdbc.driver.OracleDriver");
		dataSource.setUrl("jdbc:oracle:thin:@localhost:1521:xe");
		dataSource.setUserName("SPRING");
		dataSource.setPassword("SPRING");
	-->
	
	<!-- 2단계. MyBatis Spring 에서 제공하는 SQL 명령어를 실행할 수 있게 도와주는 도구 등록 -->
	<!-- SqlSessionFactoryBean -> SqlSessionTemplate -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 
		객체가 필요할 때마다 내부적으로 이 코드가 실행됨
		SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();
		sqlSessionFactory.setConfigLocation("classpath:mybatis-config.xml");
		sqlSessionFactory.setDataSource(dataSource);
	-->
	
	<!-- 3단계. SQL 구문 실행을 위한 템플릿을 제공하는 도구 등록 -->
	<bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	<!-- 
		객체가 필요할 때마다 내부적으로 이 코드가 실행됨
		SqlSessionTemplate sqlSession = new SqlSessionTemplate(sqlSessionFactory);
	-->
	
	<!-- 
		property : setter 주입
		constructor-arg : 생성자 주입
	-->
		
	<!-- 파일 업로드 기능을 담당하는 도구 등록 -->	
	<bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
		<!-- defaultEncoding : 업로드 되는 파일에 대한 인코딩 설정 -->
		<property name="defaultEncoding" value="UTF-8" />
		<!-- 
			maxUploadSize : 한번에 전체 업로드 되는 파일의 총 용량 
							10Mbyte = 1024 * 1024 * 10
									= 10000000 (대략의 수치)
		-->
		<property name="maxUploadSize" value="10000000" />
		<!-- maxInMemorySize : 메모리 상의 파일 최대 용량 -->
		<property name="maxInMemorySize" value="10000000" />
	</bean>	
	
	<!-- <context:property-placeholder location="classpath:/db-config/email.properties" /> -->
	<!-- 이메일 인증 관련 빈 등록 -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
    	<property name="host" value="smtp.naver.com" />
		<property name="port" value="587" />
    	<property name="username" value="${email.account}" />
    	<property name="password" value="${email.password}" />
    	<property name="javaMailProperties">
     		<props>
            	<prop key="mail.transport.protocol">smtp</prop>
                <prop key="mail.smtp.auth">true</prop>
                <!-- gmail의 경우 보안문제 업데이트로 인해 SSLSocketFactory를 추가해야 smtp 사용 가능. -->
                <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
                <prop key="mail.debug">true</prop>
                <prop key="mail.smtp.ssl.trust">smtp.naver.com</prop>
				<prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
      		</props>
		</property>
	</bean>

</beans>